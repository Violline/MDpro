#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <stdio.h>
#include <time.h>
#include <iostream>
using namespace cv;
using namespace std;

Mat OurImage, camera, gray, edges, morph;



int main(int, char**)
{
	VideoCapture cap(0); // open the default camera
	if (!cap.isOpened())  // check if we succeeded
		return -1;

	Mat edges;
	namedWindow("edges", 1);
	for (;;)
	{
		Mat frame, gray, edges, bin;
		cap >> frame; // get a new frame from camera
		Mat frame2 = frame.clone();
		Mat imgThresholded;

		cvtColor(frame, imgThresholded, CV_BGR2GRAY);
		//threshold(gray, bin, 115, 255, 0);
		Canny(imgThresholded, edges, 100, 200, 3);		// Apply Canny edge detection on the gray image
		//imshow("bin", edges);

		vector<vector<Point> > contours;
		vector<Vec4i> hierarchy;
		findContours(edges, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE);

		for (int i = 0; i < contours.size(); i++)
		{
			//cout << contours.at(i) << endl;
			//cout << contours.size() << endl;
			int area = contourArea(contours[i]);
			if (area > 500) {
				//drawContours(frame, contours, i, Scalar(255, 200, 0), 2, 8, hierarchy, 0);
				drawContours(frame, contours, i, Scalar(255, 0, 0), 2, 8, hierarchy, 0);
			}
		}

		//imshow("edges", frame);


		Mat imgHSV;
		Mat imgThresholded2;

		Scalar hsv_l(110, 150, 150);
		Scalar hsv_h(130, 255, 255);
		cvtColor(frame, imgHSV, CV_BGR2HSV);
		inRange(imgHSV, hsv_l, hsv_h, imgThresholded2);
		//imshow("blue", imgThresholded2);

		Mat dst, cdst;
		Canny(imgThresholded2, dst, 50, 200, 3);
		cvtColor(dst, cdst, CV_GRAY2BGR);

		vector<Vec2f> lines;
		HoughLines(dst, lines, 1, CV_PI / 180, 100, 0, 0);

		int count = 0;
		string txt = "DETECTED";
		for (size_t i = 0; i < lines.size(); i++)
		{
			
			float rho = lines[i][0], theta = lines[i][1];
			Point pt1, pt2;
			double a = cos(theta), b = sin(theta);
			double x0 = a*rho, y0 = b*rho;
			pt1.x = cvRound(x0 + 1000 * (-b));
			pt1.y = cvRound(y0 + 1000 * (a));
			pt2.x = cvRound(x0 - 1000 * (-b));
			pt2.y = cvRound(y0 - 1000 * (a));
			line(cdst, pt1, pt2, Scalar(0, 0, 255), 3, CV_AA);
			count++;
			if (count >= 25 && count <= 40) {
				cout << "WELL DONE" << endl;
				putText(frame, txt, Point(132, 234), FONT_HERSHEY_TRIPLEX, 1.5, Scalar(0, 0, 255), 4);
			}
		}
		imshow("linedetect", frame); //,cdst
		cout << "count" << count << endl;
		count = 0;
		 


		if (waitKey(30) >= 0) break;
	}
	// the camera will be deinitialized automatically in VideoCapture destructor
	return 0;
}
